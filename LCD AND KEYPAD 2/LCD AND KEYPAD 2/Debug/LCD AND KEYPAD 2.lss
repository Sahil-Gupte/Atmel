
LCD AND KEYPAD 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a74  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c7  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039c  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f1  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000222d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 01 	call	0x248	; 0x248 <main>
  8a:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <L_CMD>:
	if (row==0 && pos<16)
	L_CMD((pos & 0x0F)|0x80); //first row and pos, here 0x80 is pos0 or home
	else if (row==1 && pos<16)
	L_CMD((pos & 0x0F)|0xC0); //second row
	L_string(str);
}
  92:	82 bb       	out	0x12, r24	; 18
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	85 bb       	out	0x15, r24	; 21
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <L_CMD+0x16>
  ac:	00 00       	nop
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	8f ed       	ldi	r24, 0xDF	; 223
  b6:	9e e2       	ldi	r25, 0x2E	; 46
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <L_CMD+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <L_CMD+0x2c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <L_Char>:
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <L_Char+0x16>
  dc:	00 00       	nop
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <L_Char+0x26>
  ec:	00 c0       	rjmp	.+0      	; 0xee <L_Char+0x2c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <L_init>:
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	81 bb       	out	0x11, r24	; 17
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 ef       	ldi	r24, 0xF9	; 249
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <L_init+0xc>
 106:	00 c0       	rjmp	.+0      	; 0x108 <L_init+0x16>
 108:	00 00       	nop
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
 128:	08 95       	ret

0000012a <L_clr>:

void L_clr() //to clear screen
{
	L_CMD(0x01); //clear display command
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
	L_CMD(0x80); //cursor back to pos0/home
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
 136:	08 95       	ret

00000138 <keypressed>:

char keypressed()
{
	while(1)
	{
		KDDR = 0xF0; //keypad DDR
 138:	80 ef       	ldi	r24, 0xF0	; 240
 13a:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0xFF; //Setting 1-4 pins of keypad in pull-up so they are high
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8b bb       	out	0x1b, r24	; 27
		do
		{
			KPORT &= 0x0F;
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	8b bb       	out	0x1b, r24	; 27
			col = (KPIN & 0x0F); //find rowumn
 146:	89 b3       	in	r24, 0x19	; 25
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>

		} while (col != 0x0F);
 14e:	8f 30       	cpi	r24, 0x0F	; 15
 150:	b9 f7       	brne	.-18     	; 0x140 <keypressed+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	9f e1       	ldi	r25, 0x1F	; 31
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <keypressed+0x1e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <keypressed+0x24>
 15c:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(2);
				col = (KPIN & 0x0F);
 15e:	89 b3       	in	r24, 0x19	; 25
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
			}while (col == 0x0F);
 166:	8f 30       	cpi	r24, 0x0F	; 15
 168:	a1 f3       	breq	.-24     	; 0x152 <keypressed+0x1a>
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	9e e3       	ldi	r25, 0x3E	; 62
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <keypressed+0x36>
 172:	00 c0       	rjmp	.+0      	; 0x174 <keypressed+0x3c>
 174:	00 00       	nop

			_delay_ms(4);
			col = (KPIN & 0x0F);
 176:	89 b3       	in	r24, 0x19	; 25
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		} while (col == 0x0F);
 17e:	8f 30       	cpi	r24, 0x0F	; 15
 180:	41 f3       	breq	.-48     	; 0x152 <keypressed+0x1a>

		KPORT = 0xEF; //ROW 1
 182:	8f ee       	ldi	r24, 0xEF	; 239
 184:	8b bb       	out	0x1b, r24	; 27
		col=(KPIN & 0x0F);
 186:	89 b3       	in	r24, 0x19	; 25
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if(col != 0x0F)
 18e:	8f 30       	cpi	r24, 0x0F	; 15
 190:	21 f0       	breq	.+8      	; 0x19a <keypressed+0x62>
		{
			row = 3;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <row>
			break;
 198:	23 c0       	rjmp	.+70     	; 0x1e0 <keypressed+0xa8>
		}

		KPORT=0xDF; //ROW2
 19a:	8f ed       	ldi	r24, 0xDF	; 223
 19c:	8b bb       	out	0x1b, r24	; 27
		col=(KPIN & 0x0F);
 19e:	89 b3       	in	r24, 0x19	; 25
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if (col != 0x0F)
 1a6:	8f 30       	cpi	r24, 0x0F	; 15
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <keypressed+0x7a>
		{
			row=2;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <row>
			break;
 1b0:	17 c0       	rjmp	.+46     	; 0x1e0 <keypressed+0xa8>
		}

		KPORT=0xBF; //ROW3
 1b2:	8f eb       	ldi	r24, 0xBF	; 191
 1b4:	8b bb       	out	0x1b, r24	; 27
		col = (KPIN & 0x0F);
 1b6:	89 b3       	in	r24, 0x19	; 25
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if(col != 0x0F)
 1be:	8f 30       	cpi	r24, 0x0F	; 15
 1c0:	21 f0       	breq	.+8      	; 0x1ca <keypressed+0x92>
		{
			row=1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <row>
			break;
 1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <keypressed+0xa8>
		}

		KPORT=0x7F; //ROW4
 1ca:	8f e7       	ldi	r24, 0x7F	; 127
 1cc:	8b bb       	out	0x1b, r24	; 27
		col=(KPIN & 0x0F);
 1ce:	89 b3       	in	r24, 0x19	; 25
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if(col != 0x0F)
 1d6:	8f 30       	cpi	r24, 0x0F	; 15
 1d8:	09 f4       	brne	.+2      	; 0x1dc <keypressed+0xa4>
 1da:	ae cf       	rjmp	.-164    	; 0x138 <keypressed>
		{
			row=0;
 1dc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <row>
			break;
		}
	}

	if(col == 0x0E) //col4
 1e0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1e4:	8e 30       	cpi	r24, 0x0E	; 14
 1e6:	59 f4       	brne	.+22     	; 0x1fe <keypressed+0xc6>
	return (k[row][3]);
 1e8:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	e0 5a       	subi	r30, 0xA0	; 160
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	83 81       	ldd	r24, Z+3	; 0x03
 1fc:	08 95       	ret
	else if(col == 0x0B) //col3
 1fe:	8b 30       	cpi	r24, 0x0B	; 11
 200:	59 f4       	brne	.+22     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
	return (k[row][1]);
 202:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	81 81       	ldd	r24, Z+1	; 0x01
 216:	08 95       	ret
	else if(col == 0x0D) //col2
 218:	8d 30       	cpi	r24, 0x0D	; 13
 21a:	59 f4       	brne	.+22     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
	return(k[row][2]);
 21c:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	e0 5a       	subi	r30, 0xA0	; 160
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	82 81       	ldd	r24, Z+2	; 0x02
 230:	08 95       	ret
	else
	return(k[row][0]); //col1
 232:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <row>
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	e0 5a       	subi	r30, 0xA0	; 160
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	80 81       	ld	r24, Z

} //function to find out the keypressed on the 4x4 matrix
 246:	08 95       	ret

00000248 <main>:
int main(void)
{
	//unsigned char sign;
	//unsigned char *inp;

	L_init();
 248:	0e 94 79 00 	call	0xf2	; 0xf2 <L_init>
	L_CMD(0xC0);
 24c:	80 ec       	ldi	r24, 0xC0	; 192
 24e:	0e 94 49 00 	call	0x92	; 0x92 <L_CMD>
	while (1)
	{
		//int i=0;
		
		//L_Pos(1,1,"Hello");
		L_Char(keypressed()); //pressed key to LCD CMND
 252:	0e 94 9c 00 	call	0x138	; 0x138 <keypressed>
 256:	0e 94 61 00 	call	0xc2	; 0xc2 <L_Char>
        char press = keypressed();
 25a:	0e 94 9c 00 	call	0x138	; 0x138 <keypressed>
		if(press == 'c')
 25e:	83 36       	cpi	r24, 0x63	; 99
 260:	c1 f7       	brne	.-16     	; 0x252 <main+0xa>
		{
			L_clr ();
 262:	0e 94 95 00 	call	0x12a	; 0x12a <L_clr>
 266:	f5 cf       	rjmp	.-22     	; 0x252 <main+0xa>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
