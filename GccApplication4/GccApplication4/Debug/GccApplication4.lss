
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081b  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fb  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_comm>:
		
	}
}

void lcd_comm(char x){
	PORTD = x;
  6c:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1<<RS);
  6e:	85 b3       	in	r24, 0x15	; 21
  70:	8e 7f       	andi	r24, 0xFE	; 254
  72:	85 bb       	out	0x15, r24	; 21
	PORTC |= 1<<EN;
  74:	85 b3       	in	r24, 0x15	; 21
  76:	82 60       	ori	r24, 0x02	; 2
  78:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	83 ed       	ldi	r24, 0xD3	; 211
  7c:	90 e3       	ldi	r25, 0x30	; 48
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_comm+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <lcd_comm+0x18>
  84:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(1<<EN);
  86:	85 b3       	in	r24, 0x15	; 21
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret

0000008e <lcd_data>:
}

void lcd_data(char x){
	PORTD = x;
  8e:	82 bb       	out	0x12, r24	; 18
	PORTC |= 1<<RS;
  90:	85 b3       	in	r24, 0x15	; 21
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bb       	out	0x15, r24	; 21
	PORTC |= 1<<EN;
  96:	85 b3       	in	r24, 0x15	; 21
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_data+0x12>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_data+0x18>
  a6:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(1<<EN);
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	08 95       	ret

000000b0 <lcd_init>:
}

void lcd_init(void){
	DDRD = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x03;
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	84 bb       	out	0x14, r24	; 20
	lcd_comm(0x38);
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_comm>
	lcd_comm(0x06);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_comm>
	lcd_comm(0x0E);
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_comm>
	lcd_comm(0x01);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_comm>
	lcd_comm(0x80);
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_comm>
  d6:	08 95       	ret

000000d8 <main>:
void lcd_init (void);


int main(void)
{
	lcd_init();
  d8:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_init>
	lcd_data('H');
  dc:	88 e4       	ldi	r24, 0x48	; 72
  de:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('E');
  e2:	85 e4       	ldi	r24, 0x45	; 69
  e4:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('L');
  e8:	8c e4       	ldi	r24, 0x4C	; 76
  ea:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('L');
  ee:	8c e4       	ldi	r24, 0x4C	; 76
  f0:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('O');
  f4:	8f e4       	ldi	r24, 0x4F	; 79
  f6:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>

	lcd_comm(20);
  fa:	84 e1       	ldi	r24, 0x14	; 20
  fc:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_comm>

	lcd_data('W');
 100:	87 e5       	ldi	r24, 0x57	; 87
 102:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('O');
 106:	8f e4       	ldi	r24, 0x4F	; 79
 108:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('R');
 10c:	82 e5       	ldi	r24, 0x52	; 82
 10e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('L');
 112:	8c e4       	ldi	r24, 0x4C	; 76
 114:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('D');
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x46>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
